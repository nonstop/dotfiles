" global appearance
set nocp
set history=150
set tabstop=4       " numbers of spaces of tab character
set softtabstop=4   " number of spaces that <Tab> uses while editing
set shiftwidth=4    " numbers of spaces to (auto)indent
set expandtab
"set smartindent     " smart indent
set ignorecase      " ignorecase / ic
set smartcase       " smartcase: override the 'ic' when searching
                    " if search pattern contains uppercase char
set hlsearch        " highlight searches
set incsearch       " do incremental searching
set autoindent      " always set autoindenting on
set ruler           " show the cursor position all the time
set nobackup        " do not keep a backup file
set number          " show line numbers
set ls=2            " allways show status line
set title           " show title in console title bar
set nostartofline   " don't jump to first character when paging
if version >= 703
  set colorcolumn=100
endif
filetype on         " filetype detection
filetype plugin on
filetype indent on
set showmatch       " show matching brackets
set foldmethod=marker
set hidden          " enable switching between buffers without saving them
if has('syntax') && (&t_Co > 2)
  syntax on
endif
set fileencodings=utf8,cp866

set list
set listchars=tab:->
set listchars+=trail:Â·

"noremap Bs Del
"noremap Del Bs
"set backspace=2
set backspace=indent,eol,start
" allows marking/pasting with the mouse also on 'not gui vim'
set mouse=a

set backupdir=~/.vimbackup,/tmp
set directory=~/.vimbackup,/tmp

" statusline
"set statusline=%<%f\ %h%m%r%=%-14.(%l,%c%V%)\ %P\ %{strftime(\"%a\ %b\ %d\ -\ %H:%M\")}
set statusline=%<%f\ \ \ %{&fileencoding}\ %h%m%r%=%-14.(%l,%c%V%)\ %P\ %{strftime(\"%a\ %b\ %d\ -\ %H:%M\")}
"set statusline=%<%F%h%m%r%h%w%y%=\ lin:%l\,%L\ col:%c%V\ pos:%o%=\ %{strftime(\"%a\ %b\ %d\ -\ %H:%M\")}

" colorscheme
set t_Co=256
set background=dark
if has("gui_running") && (&t_Co > 2)
    set cursorline      " highlight current line
    set guioptions-=T "get rid of toolbar
    set guioptions-=m "get rid of menu
    set background=dark
    colorscheme xoria256 "moria
    "colorscheme c16gui
    if has("gui_gtk2")
        "set guifont=Droid\ Sans\ Mono\ 10
        set guifont=Terminus\ 12
    elseif has("x11")
        set guifont=--xos4-terminus-medium-*-*-*-16-*-koi8-r
    else
        set guifont=Terminus:h11:cDEFAULT
    endif 
    hi Tabs guibg=#88e088 guifg=#000000 gui=none
    hi LongLines guibg=#88e088 guifg=#000000 gui=none
    
"    au BufNewFile,BufRead * exec 'match LongLines /\%>100v.\+/'
"    au BufNewFile,BufRead *.c,*h,*.cc,*.hh,*.cpp,*.hpp,*.cxx,*.hxx,*.pc,*.pcc exec "2match Tabs '\t'"

else
    set background=dark
    colorscheme slate
endif

" Make 'gf' rebound to last cursor position (line *and* column)
noremap gf gf`"zz

" file templates
fun InitSlackBuild()
    0r ~/.vim/templates/SlackBuild.tpl
    set filetype=sh
endfun

:autocmd BufRead,BufNewFile *.ts set ft=ts
:autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
":autocmd BufRead * silent '" 
":autocmd BufRead wscript set filetype=python
:autocmd BufNewFile *.html 0r ~/.vim/templates/html.tpl
:autocmd BufNewFile *.xhtml 0r ~/.vim/templates/xhtml.tpl
:autocmd BufNewFile *.xml 0r ~/.vim/templates/xml.tpl
:autocmd BufNewFile *.slack-desc 0r ~/.vim/templates/slack-desc.tpl
:autocmd BufNewFile slack-desc 0r ~/.vim/templates/slack-desc.tpl
:autocmd BufNewFile *.SlackBuild call InitSlackBuild()
:autocmd BufRead *.go set ft=go

" all neccessary initialization for editing python scripts
fun InitPython()
    setlocal keywordprg=pydoc
    set smarttab
    let python_highlight_all = 1
    nmap <F5> :w\|!python %<CR>
    autocmd BufWritePre *.py normal m`:%s/\s\+$//e ``
    autocmd BufRead *.py set makeprg=python\ -c\ \"import\ py_compile,sys;\ sys.stderr=sys.stdout;\ py_compile.compile(r'%')\"
    autocmd BufRead *.py set efm=%C\ %.%#,%A\ \ File\ \"%f\"\\,\ line\ %l%.%#,%Z%[%^\ ]%\\@=%m
endfun
autocmd BufRead SConstruct set ft=python
autocmd BufRead SConscript set ft=python
"autocmd FileType c setlocal omnifunc=ccomplete#Complete
autocmd FileType python call InitPython()
autocmd FileType sql set tabstop=2 softtabstop=2 shiftwidth=2
autocmd FileType cmake set tabstop=2 softtabstop=2 shiftwidth=2

" plugins' settings

" TagList
let Tlist_Use_Right_Window=1
let Tlist_Auto_Open=0
let Tlist_Enable_Fold_Column=0
let Tlist_Compact_Format=1
let Tlist_WinWidth=28
let Tlist_Exit_OnlyWindow=1
let Tlist_File_Fold_Auto_Close = 1

let g:tagbar_right = 1
let g:tagbar_width = 40
let g:tagbar_iconchars = ['+', '-']
let g:tagbar_sort = 0

" omniCppComplete
"let CppOmni_GlobalScopeSearch = 0
"let OmniCpp_DisplayMode = 1
"let OmniCpp_SelectFirstItem = 2
"let CppOmni_ClassScopeCompletionMethod = 1

let g:clang_auto_select=1
let g:clang_complete_auto=0
let g:clang_use_library=1
"let g:clang_periodic_quickfix=1
"let g:clang_complete_copen=0
"let g:clang_close_preview=1

"" do not show preview window for tag
set completeopt-=preview

" NERDCommenter
let g:NERDShutUp=1

" functions

function! s:match_long_lines(len)
    execute "match LongLines /\\%>".a:len."v.\\+/"
endfunction
command  -nargs=1 MatchLongLines call s:match_long_lines(<f-args>)

function! s:insert_gates(arg)
    let gatename = toupper(a:arg) . "_" . substitute(toupper(expand("%:t")), "\\.", "_", "g")
    execute "normal i#ifndef " . gatename
    execute "normal o#define " . gatename . "\n\n\n"
    execute "normal Go#endif /* " . gatename . " */\n"
    normal kkk
endfunction
command -nargs=1 PragmaOnce call s:insert_gates(<f-args>)

function! s:source_format_file()
    execute "!src_fmt %:."
endfunction
command -nargs=0 SourceFormatFile call s:source_format_file()

function! s:source_format()
    execute "'<,'>!src_fmt -"
endfunction
command -range -nargs=0 SourceFormat call s:source_format()

function! s:svn_annotate()
    let lineNum = line('.')
    execute '1,$!svn ann %'
    execute "normal ".lineNum."gg"
endfun
command -nargs=0 SvnAnn call s:svn_annotate()

function! s:translate_word()
    let s:dict    = "sdcv"
    let s:phrase  = expand("<cword>")
    let s:tmpfile = tempname()

    silent execute "!" . s:dict . " " . s:phrase . " > " . s:tmpfile

    let s:lines = system("wc -l " . s:tmpfile . "| awk '{print $1}'")

    if s:lines == 0
        echo s:phrase . ": Not found."
    else
        execute "botright sp " . s:tmpfile
    end
endfun
command! -nargs=0 Translate call s:translate_word()

function! s:ctags_gen()
    execute '!ctags -R --c++-kinds=+p --langmap=c:.c.pc,c++:.c++.cc.cpp.cxx.h.h++.hh.hp.hpp.hxx.C.H.pcc --fields=+ianS  --extra=+q .'
    execute '!cscope -b -k -R'
endfun
command! -nargs=0 Ctags call s:ctags_gen()

" remove all tabs when saving file
"fun RemoveTabs()
    "silent execute ":%s/\t\\+/\ \ \ \ /g"
"endfun
":autocmd BufWrite *.cpp call RemoveTabs()

try
    source ~/.vim/mappings.vim
    source ~/.vim/local.vim
catch
endtry

function! NonstopIndent()
    let l:cline_num = line('.')
    let l:pline_num = prevnonblank(l:cline_num - 1)
    let l:pline = getline(l:pline_num)
    let l:retv = cindent('.')
    while l:pline =~# '\(^\s*{\s*\|^\s*//\|^\s*/\*\|\*/\s*$\)'
        let l:pline_num = prevnonblank(l:pline_num - 1)
        let l:pline = getline(l:pline_num)
    endwhile
    if l:pline =~# '^\s*namespace.*'
        let l:retv = 0
    endif
    return l:retv
endfunction

set cinoptions=:0,l1,g0
set indentexpr=NonstopIndent()
